"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2080],{62080:function(e,t,a){a.d(t,{offchainLookup:function(){return S},offchainLookupSignature:function(){return R}});var r=a(70803),n=a(28395),s=a(73849),o=a(60237);class i extends s.G{constructor({callbackSelector:e,cause:t,data:a,extraData:r,sender:n,urls:s}){super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],t.metaMessages?.length?"":[],"Offchain Gateway Call:",s&&["  Gateway URL(s):",...s.map(e=>`    ${(0,o.G)(e)}`)],`  Sender: ${n}`,`  Data: ${a}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class c extends s.G{constructor({result:e,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,o.G)(t)}`,`Response: ${(0,n.P)(e)}`],name:"OffchainLookupResponseMalformedError"})}}class u extends s.G{constructor({sender:e,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}var f=a(8609),d=a(61684),l=a(48271),p=a(57968),h=a(69504),w=a(37012),m=a(37508),y=a(39024),g=a(94514),E=a(75773),b=a(66503),k=a(74850),M=a(67614),x=a(22834);let L="/docs/contract/encodeErrorResult";function P(e){let{abi:t,errorName:a,args:r}=e,n=t[0];if(a){let e=(0,x.mE)({abi:t,args:r,name:a});if(!e)throw new g.MS(a,{docsPath:L});n=e}if("error"!==n.type)throw new g.MS(void 0,{docsPath:L});let s=(0,M.t)(n),o=(0,b.C)(s),i="0x";if(r&&r.length>0){if(!n.inputs)throw new g.Zh(n.name,{docsPath:L});i=(0,l.E)(n.inputs,r)}return(0,h.SM)([o,i])}let G="/docs/contract/encodeFunctionResult";async function O(e){let{data:t,ccipRequest:a}=e,{args:[r]}=function(e){let{abi:t,data:a}=e,r=(0,E.tP)(a,0,4),n=t.find(e=>"function"===e.type&&r===(0,b.C)((0,M.t)(e)));if(!n)throw new g.eF(r,{docsPath:"/docs/contract/decodeFunctionData"});return{functionName:n.name,args:"inputs"in n&&n.inputs&&n.inputs.length>0?(0,k.r)(n.inputs,(0,E.tP)(a,4)):void 0}}({abi:m.Yi,data:t}),n=[],s=[];return await Promise.all(r.map(async(e,t)=>{try{s[t]=await a(e),n[t]=!1}catch(e){n[t]=!0,s[t]="HttpRequestError"===e.name&&e.status?P({abi:m.Yi,errorName:"HttpError",args:[e.status,e.shortMessage]}):P({abi:[y.Up],errorName:"Error",args:["shortMessage"in e?e.shortMessage:e.message]})}})),function(e){let{abi:t,functionName:a,result:r}=e,n=t[0];if(a){let e=(0,x.mE)({abi:t,name:a});if(!e)throw new g.xL(a,{docsPath:G});n=e}if("function"!==n.type)throw new g.xL(void 0,{docsPath:G});if(!n.outputs)throw new g.MX(n.name,{docsPath:G});let s=(()=>{if(0===n.outputs.length)return[];if(1===n.outputs.length)return[r];if(Array.isArray(r))return r;throw new g.hn(r)})();return(0,l.E)(n.outputs,s)}({abi:m.Yi,functionName:"query",result:[n,s]})}let R="0x556f1830",C={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function S(e,{blockNumber:t,blockTag:a,data:n,to:s}){let{args:o}=(0,d.p)({data:n,abi:[C]}),[c,f,w,m,y]=o,{ccipRead:g}=e,E=g&&"function"==typeof g?.request?g.request:v;try{if(!(0,p.E)(s,c))throw new u({sender:c,to:s});let n=f.includes("x-batch-gateway:true")?await O({data:w,ccipRequest:E}):await E({data:w,sender:c,urls:f}),{data:o}=await (0,r.R)(e,{blockNumber:t,blockTag:a,data:(0,h.zo)([m,(0,l.E)([{type:"bytes"},{type:"bytes"}],[n,y])]),to:s});return o}catch(e){throw new i({callbackSelector:m,cause:e,data:n,extraData:y,sender:c,urls:f})}}async function v({data:e,sender:t,urls:a}){let r=Error("An unknown error occurred.");for(let s=0;s<a.length;s++){let o=a[s],i=o.includes("{data}")?"GET":"POST",u="POST"===i?{data:e,sender:t}:void 0,d="POST"===i?{"Content-Type":"application/json"}:{};try{let a;let s=await fetch(o.replace("{sender}",t.toLowerCase()).replace("{data}",e),{body:JSON.stringify(u),headers:d,method:i});if(a=s.headers.get("Content-Type")?.startsWith("application/json")?(await s.json()).data:await s.text(),!s.ok){r=new f.Gg({body:u,details:a?.error?(0,n.P)(a.error):s.statusText,headers:s.headers,status:s.status,url:o});continue}if(!(0,w.v)(a)){r=new c({result:a,url:o});continue}return a}catch(e){r=new f.Gg({body:u,details:e.message,url:o})}}throw r}}}]);